"""
1.  Написать генератор нечётных чисел от 1 до n (включительно), используя ключевое слово yield
2.  *(вместо 1) Решить задачу генерации нечётных чисел от 1 до n (включительно), не используя ключевое слово yield.
"""

def odd_nums(n):
    for i in range(1, n + 1, 2):
        yield i

for x in odd_nums(15):
    print(f'for - {x}')

gen_a = odd_nums(15)
gen_b = odd_nums(15)

print(f'next(gen_a) = {next(gen_a)}')
print(f'next(gen_a) = {next(gen_a)}')
print(f'next(gen_a) = {next(gen_a)}')
print(f'next(gen_b) = {next(gen_b)}')

def odd_nums_not_yield(n):
    return [i for i in range(1, n + 1, 2)]

print(f'task_2 = {odd_nums_not_yield(15)}')

"""
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
('Станислав', None)
Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения. Подумать, в каких ситуациях генератор даст эффект.
"""
import itertools

tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена', 'Евгений',
    'Станислав'
]
klasses = [
    '9А', '7В', '9Б', '9В',
    '8Б', '10А', '10Б', '9А'
]


def gen():
    for e in itertools.zip_longest(tutors, klasses, fillvalue=None):
        yield e


data_gen = gen()
for i in data_gen:
    print(i)

for i in data_gen:
    print('тут наши полномочия - все..')

"""
Представлен список чисел. Необходимо вывести те его элементы, значения которых больше предыдущего, например:
src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [12, 44, 4, 10, 78, 123]
Подсказка: использовать возможности python, изученные на уроке. Подумайте, как можно сделать оптимизацию кода по памяти, по скорости.
"""
from timeit import Timer

src = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
check_rslt = [12, 44, 4, 10, 78, 123]


def gen_1(s):
    i = 0
    while True:
        i += 1
        if i >= len(s):
            break
        if s[i - 1] < s[i]:
            yield s[i]


def gen_2(s):
    for i in range(1, len(s)):
        if s[i - 1] < s[i]:
            yield s[i]


def gen_3(s):
    prev = None
    for i in s:
        if (prev or i) < i:
            prev = i
            yield i
        prev = i


def gen_4(s):
    for x, y in zip(s, s[1:]):
        if x < y:
            yield y


def comp_1(s):
    return [x for i, x in enumerate(s) if s[i - 1] < s[i] if i > 0]


def comp_2(s):
    return [y for x, y in zip(s, s[1:]) if x < y]


def ret_1(s):
    rslt = []
    prev = None
    for i in s:
        if (prev or i) < i:
            prev = i
            rslt.append(i)
        prev = i
    return rslt


if __name__ == '__main__':

    print(check_rslt == list(gen_1(src)) == list(gen_2(src)) == list(gen_3(src)) == list(gen_4(src)) == comp_1(src) == comp_2(src) == ret_1(src))

    timeit_count = 100_000
    for v in range(1, 5):
        time = Timer("list(func(src))", f"from __main__ import src, gen_{v} as func").timeit(timeit_count)
        print(f"gen_{v}: {time}")

    for v in range(1, 3):
        time = Timer("func(src)", f"from __main__ import src, comp_{v} as func").timeit(timeit_count)
        print(f"comp_{v}: {time}")

    for v in range(1, 2):
        time = Timer("func(src)", f"from __main__ import src, ret_{v} as func").timeit(timeit_count)
        print(f"ret_{v}: {time}")

"""
Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать из этих элементов список с сохранением порядка их следования в исходном списке, например:
src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [23, 1, 3, 10, 4, 11]
"""

src = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

unique_num = set()
unique_num_tmp = set()
for el in src:
    if el not in unique_num_tmp:
        unique_num.add(el)
    else:
        unique_num.discard(el)
    unique_num_tmp.add(el)

print([x for x in src if x in unique_num])